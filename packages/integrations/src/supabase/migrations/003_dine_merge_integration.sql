-- Migration for integrating with Dine Merge Mobile Order app
-- This migration creates tables and relationships for restaurant ordering functionality

-- Create orders table for restaurant orders
CREATE TABLE IF NOT EXISTS orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  guest_id BIGINT REFERENCES guests(id),
  conversation_id BIGINT REFERENCES conversations(id),
  order_number TEXT UNIQUE NOT NULL,
  restaurant_id TEXT, -- Reference to restaurant in dine merge app
  total_amount DECIMAL(10,2) NOT NULL,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'preparing', 'ready', 'delivered', 'cancelled')),
  order_type TEXT DEFAULT 'voice' CHECK (order_type IN ('voice', 'chat', 'manual')),
  special_instructions TEXT,
  estimated_delivery_time TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create order_items table for individual items in an order
CREATE TABLE IF NOT EXISTS order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT REFERENCES orders(id) ON DELETE CASCADE,
  menu_item_id TEXT NOT NULL, -- Reference to menu item in dine merge app
  menu_item_name TEXT NOT NULL,
  quantity INTEGER NOT NULL DEFAULT 1,
  unit_price DECIMAL(10,2) NOT NULL,
  total_price DECIMAL(10,2) NOT NULL,
  modifications TEXT[], -- Array of modifications/customizations
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create menu_items_cache table to cache menu items from dine merge app
CREATE TABLE IF NOT EXISTS menu_items_cache (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  external_id TEXT UNIQUE NOT NULL, -- ID from dine merge app
  restaurant_id TEXT NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  category TEXT,
  is_available BOOLEAN DEFAULT true,
  allergens TEXT[],
  dietary_restrictions TEXT[],
  embedding vector(1536), -- For semantic search of menu items
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create index for vector similarity search on menu items
CREATE INDEX IF NOT EXISTS menu_items_embedding_idx ON menu_items_cache 
USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Create order_intents table for tracking order-related intents
CREATE TABLE IF NOT EXISTS order_intents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  conversation_id BIGINT REFERENCES conversations(id),
  intent_type TEXT NOT NULL CHECK (intent_type IN ('add_item', 'remove_item', 'modify_item', 'place_order', 'cancel_order', 'check_status')),
  menu_item_id TEXT,
  quantity INTEGER,
  modifications TEXT[],
  confidence DECIMAL(3,2),
  processed BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create payment_transactions table for order payments
CREATE TABLE IF NOT EXISTS payment_transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT REFERENCES orders(id),
  transaction_id TEXT UNIQUE NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  payment_method TEXT CHECK (payment_method IN ('credit_card', 'room_charge', 'cash')),
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'authorized', 'captured', 'failed', 'refunded')),
  gateway_response JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Enable Row-Level Security on new tables
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE menu_items_cache ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_intents ENABLE ROW LEVEL SECURITY;
ALTER TABLE payment_transactions ENABLE ROW LEVEL SECURITY;

-- Policies for orders table
CREATE POLICY "Internal services can manage orders" ON orders
  FOR ALL
  USING (auth.role() = 'internal');

CREATE POLICY "Staff can view and update orders" ON orders
  FOR SELECT
  USING (auth.role() = 'staff');

CREATE POLICY "Staff can update order status" ON orders
  FOR UPDATE
  USING (auth.role() = 'staff')
  WITH CHECK (auth.role() = 'staff');

-- Policies for order_items table
CREATE POLICY "Internal services can manage order items" ON order_items
  FOR ALL
  USING (auth.role() = 'internal');

CREATE POLICY "Staff can view order items" ON order_items
  FOR SELECT
  USING (auth.role() = 'staff');

-- Policies for menu_items_cache table
CREATE POLICY "Internal services can manage menu cache" ON menu_items_cache
  FOR ALL
  USING (auth.role() = 'internal');

CREATE POLICY "Staff can view menu items" ON menu_items_cache
  FOR SELECT
  USING (auth.role() = 'staff');

-- Policies for order_intents table
CREATE POLICY "Internal services can manage order intents" ON order_intents
  FOR ALL
  USING (auth.role() = 'internal');

CREATE POLICY "Staff can view order intents" ON order_intents
  FOR SELECT
  USING (auth.role() = 'staff');

-- Policies for payment_transactions table
CREATE POLICY "Internal services can manage payments" ON payment_transactions
  FOR ALL
  USING (auth.role() = 'internal');

CREATE POLICY "Staff can view payments" ON payment_transactions
  FOR SELECT
  USING (auth.role() = 'staff');

-- Add triggers for automatic timestamp updates
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_menu_items_cache_updated_at BEFORE UPDATE ON menu_items_cache
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to calculate order total
CREATE OR REPLACE FUNCTION calculate_order_total(order_id_param BIGINT)
RETURNS DECIMAL(10,2) AS $$
DECLARE
    total DECIMAL(10,2);
BEGIN
    SELECT COALESCE(SUM(total_price), 0) INTO total
    FROM order_items
    WHERE order_id = order_id_param;
    
    RETURN total;
END;
$$ LANGUAGE plpgsql;

-- Function to update order total when items change
CREATE OR REPLACE FUNCTION update_order_total()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        UPDATE orders 
        SET total_amount = calculate_order_total(OLD.order_id)
        WHERE id = OLD.order_id;
        RETURN OLD;
    ELSE
        UPDATE orders 
        SET total_amount = calculate_order_total(NEW.order_id)
        WHERE id = NEW.order_id;
        RETURN NEW;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update order total when items change
CREATE TRIGGER update_order_total_trigger
    AFTER INSERT OR UPDATE OR DELETE ON order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_total();

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_orders_guest_id ON orders(guest_id);
CREATE INDEX IF NOT EXISTS idx_orders_conversation_id ON orders(conversation_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at);
CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id);
CREATE INDEX IF NOT EXISTS idx_menu_items_restaurant_id ON menu_items_cache(restaurant_id);
CREATE INDEX IF NOT EXISTS idx_menu_items_external_id ON menu_items_cache(external_id);
CREATE INDEX IF NOT EXISTS idx_order_intents_conversation_id ON order_intents(conversation_id);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_order_id ON payment_transactions(order_id);
